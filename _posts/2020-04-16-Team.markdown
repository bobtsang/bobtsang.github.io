---
layout: post
title:  "Team"
date:   2020-04-16 22:00:00 +0800
---
## Setting Goal

A good goal should consist of the following.

- Target
- Baseline
- Trend
- Time Frame

## Setting Up Meetings

Principle of when should we have what meeting

## Design of Team

### Role

#### Team lead 

- Understand the business users <sup>3</sup>:
  - Understand their job responsibilities, goals, and objectives.
  - Determine the decisions that the business users want to make with the help of the DW/BI system.
  - Identify the “best” users who make effective, high-impact decisions.
  - Find potential new users and make them aware of the DW/BI system's capabilities.
- Deliver high-quality, relevant, and accessible information and analytics to the business users:
  - Choose the most robust, actionable data to present in the DW/BI system, carefully selected from the vast universe of possible data sources in your organization.
  - Make the user interfaces and applications simple and template-driven, explicitly matched to the users' cognitive processing profiles.
  - Make sure the data is accurate and can be trusted, labeling it consistently across the enterprise.
  - Continuously monitor the accuracy of the data and analyses.
  - Adapt to changing user profiles, requirements, and business priorities, along with the availability of new data sources.
- Sustain the DW/BI environment:
  - Take a portion of the credit for the business decisions made using the DW/BI system, and use these successes to justify staffing and ongoing expenditures.
  - Update the DW/BI system on a regular basis.
  - Maintain the business users' trust.
  - Keep the business users, executive sponsors, and IT management happy.

### Scope

## Knowledge Base

### How to write technical documentation

### How to develop teammates into techical gurus?

## Git

### Push changes to master

1. Merge directly
   It's a `three-way` merge and a merge commit.

2. Rebase and merge
   It's fast-forward merge.


## Vim

## Reference

[1] [Manager Playbook](https://github.com/ksindi/managers-playbook) <br>
[2] [Writing technical documentation](https://developers.google.com/tech-writing) <br>
[3] The Datawarehouse Toolkit: The Definitive Guide <br>
[4] [Career Ladder: A sample of career ladder I use for my organization, open sourced for anyone](https://career-ladders.dev/) <br>
[5] [On Pair Programming](https://martinfowler.com/articles/on-pair-programming.html)<br>
[6] [How We Onboard New Engineers at Zapier, Brian Cooksey](https://zapier.com/engineering/engineer-onboarding/)
[7] [How to write the perfect pull request](https://github.blog/2015-01-21-how-to-write-the-perfect-pull-request/)
[8] [Why a pull request is not called a push request?, Stackoverflow](https://stackoverflow.com/questions/21657430/why-is-a-git-pull-request-not-called-a-push-request)<br>
[9] [git rebase fundamentals](https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase#:~:text=From%20a%20content%20perspective%2C%20rebasing,them%20to%20the%20specified%20base.)<br>
[10] [Git for Computer Scientist](https://eagain.net/articles/git-for-computer-scientists/)<br>
[11] [Open Vim: an Interactive vim tutorial](https://www.openvim.com/) <br>
[12] [Situational leadership theory: A test of three versions](https://www.sciencedirect.com/science/article/pii/S1048984309001507)
